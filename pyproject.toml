[project]
name = "dysh"
description = ''
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = {file = "LICENSE"}
keywords = []
dynamic = ["version"]
authors = [
  { name = "Marc Pound", email = "mpound@umd.edu" },
  { name = "Peter Teuben", email = "teuben@umd.edu" },
  { name = "Pedro Salas", email = "psalas@nrao.edu" },
  { name = "Evan Smith", email = "esmith@nrao.edu" },
  { name = "Thomas Chamberlin", email = "tchamber@nrao.edu" },
  { name = "Victoria Catlett"}
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "httpx",
  "astropy>=6.1",
  "astroquery",
  "ipython",
  "jplephem",
  "matplotlib",
  "numpy<2",
  "pandas",
  "rich",
  "scipy",
  "specutils>=2",
  "tenacity",
]

[project.optional-dependencies]
nb = [
  "jupyter",
  "jupyterlab",
  "ipympl",
  "jupyter-nbextensions-configurator>=0.6.4",
]
all = ["dysh[nb]"]

[dependency-groups]
dev = [
  "coverage[toml]",
  "ipdb",
  "myst-nb",
  "nbclient",
  "nbformat",
  "numpydoc",
  "pre-commit",
  "pytest",
  "pytest-cov",
  "pytest-xdist>=3.6.1",
  "ruff",
  "sphinx",
  "sphinx-autobuild",
  "sphinx-book-theme",
  "sphinx-copybutton",
  "sphinx-design",
  "sphinx-inline-tabs",
  "sphinxcontrib-mermaid",
  "dysh[all]", # ensure that all extras are included in dev envs
  "pytest-timeout>=2.4.0",
]

[project.urls]
Documentation = "https://github.com/GreenBankObservatory/dysh#readme"
Issues = "https://github.com/GreenBankObservatory/dysh/issues"
Source = "https://github.com/GreenBankObservatory/dysh"

[project.scripts]
fdr = "dysh.util.files:main_cli"
dysh = "dysh.shell:main"
dysh-lab = "dysh.shell.lab:main"

[tool.hatch.version]
path = "src/dysh/__init__.py"

[tool.hatch.envs.default]
# By default hatch will effectively do $ pip install dysh[all]
features = ["all"]

# run via: $ hatch run <script>
[tool.hatch.envs.default.scripts]
test = "pytest {args}"
lint = "ruff check . {args}"
lint-all = "ruff check --select ALL {args}"
lint-fix = "ruff check --select ALL --fix {args}"
docs = "sphinx-autobuild {root}/docs/source {root}/docs/build -b html {args}"
docs-build = "sphinx-build {root}/docs/source {root}/docs/build -b html {args}"

[tool.hatch.envs.test]

# run via: $ hatch run test:<script>
[tool.hatch.envs.test.scripts]
matrix = "pytest {args}"
cov = "pytest --cov-report=xml --cov-config=pyproject.toml --cov=src/dysh --cov=tests {args}"

# Run tests across all supported version of Python
[[tool.hatch.envs.test.matrix]]
python = ["310", "311", "312"]

[tool.hatch.build.targets.sdist]
include = ["/src", "/tests", "/bin"]
exclude = [
  "/.github",
  "/.gitignore",
  "*.swp",
  "/attic",
  "/build",
  "/benchmark",
  "/docs",
  "/dist",
  "/notebooks",
]

[tool.hatch.build.targets.wheel]
packages = ["src/dysh"]

[tool.coverage.run]
branch = true
source = [
  "src/"
]
parallel = true
omit = [
  "src/dysh/__about__.py",
  "*/tests/*",
  "test_*.py"
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.pyright]
reportImplicitStringConcatenation = false

[tool.ruff]
line-length = 120
src = ["src", "benchmark", "notebooks"]
extend-exclude = ["attic", "notebooks/developer", "*.ipynb"]


[tool.ruff.lint]
select = [
  "F", # https://docs.astral.sh/ruff/rules/pyflakes-f
  "E", # https://docs.astral.sh/ruff/rules/error-e
  "W", # https://docs.astral.sh/ruff/rules/warning-w
  "B", # https://docs.astral.sh/ruff/rules/flake8-bugbear-b
  "I", # https://docs.astral.sh/ruff/rules/isort-i
  "NPY", # https://docs.astral.sh/ruff/rules/numpy-specific-rules-npy
  "PD", # https://docs.astral.sh/ruff/rules/pandas-vet-pd
  "RUF", # https://docs.astral.sh/ruff/rules/ruff-specific-rules-ruf
  "UP", # https://docs.astral.sh/ruff/rules/printf-string-formatting/
  "S101", # https://docs.astral.sh/ruff/rules/assert/
  "T10", # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
  "PLR5501", # https://docs.astral.sh/ruff/rules/collapsible-else-if/
  "PLR2044", # https://docs.astral.sh/ruff/rules/empty-comment/
  "G010",
]
fixable = ["ALL"]
ignore = [
  "E741",  # ambiguous-variable-name
  "RUF002", # ambiguous characters
  "RUF052", # dummy var used
  "PD015", # TODO: This really should be removed
  "E501", # line too long TODO: This really should be removed
  "NPY002", # https://docs.astral.sh/ruff/rules/numpy-legacy-random/
]

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
# Ignore  in all `__init__.py` files
"__init__.py" = ["ALL"]
"**/{tests,docs,tools}/*" = ["E402", "B011", "B017", "S101"]
# The stuff in the attic doesn't need to be linted at all
"attic/**" = ["ALL"]


[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests", "src", "notebooks/examples"]
filterwarnings = [
    "ignore::DeprecationWarning"
]
addopts = [
  "--timeout=300",
  "-m not slow and not gbo_only"  # Skip slow and GBO-only tests by default
]
markers = [
    "slow: marks tests as slow (run with 'pytest -m slow' or 'pytest -m \"\"')",
    "notebooks: marks notebook tests (run with 'pytest -m notebooks')",
    "gbo_only: marks tests that require GBO network access (run with 'pytest -m gbo_only')",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
